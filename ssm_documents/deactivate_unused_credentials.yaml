---
schemaVersion: '0.3'
description: 'Deactivate unused IAM user credentials (access keys and console password)'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: 'The ARN of the role that allows Automation to perform the actions'
    default: ''
  IAMUser:
    type: String
    description: 'The IAM user name with unused credentials'
mainSteps:
  - name: GetUserAccessKeys
    action: 'aws:executeAwsApi'
    description: 'List access keys for the IAM user'
    inputs:
      Service: iam
      Api: ListAccessKeys
      UserName: '{{ IAMUser }}'
    outputs:
      - Name: AccessKeys
        Selector: $.AccessKeyMetadata
        Type: MapList
  - name: DeactivateAccessKeys
    action: 'aws:executeScript'
    description: 'Deactivate unused access keys'
    inputs:
      Runtime: python3.11
      Handler: deactivate_keys
      Script: |
        import boto3
        from datetime import datetime, timezone, timedelta

        def deactivate_keys(events, context):
            iam = boto3.client('iam')
            username = events['IAMUser']
            access_keys = events['AccessKeys']
            max_age_days = ${MaxCredentialUsageAge}
            deactivated_keys = []

            for key in access_keys:
                key_id = key['AccessKeyId']
                if key['Status'] == 'Active':
                    try:
                        response = iam.get_access_key_last_used(AccessKeyId=key_id)
                        last_used = response.get('AccessKeyLastUsed', {}).get('LastUsedDate')

                        # If never used or not used within max_age_days, deactivate
                        if last_used is None:
                            age_days = (datetime.now(timezone.utc) - key['CreateDate']).days
                        else:
                            age_days = (datetime.now(timezone.utc) - last_used).days

                        if age_days >= max_age_days:
                            iam.update_access_key(
                                UserName=username,
                                AccessKeyId=key_id,
                                Status='Inactive'
                            )
                            deactivated_keys.append(key_id)
                    except Exception as e:
                        print(f"Error processing key {key_id}: {str(e)}")

            return {'DeactivatedKeys': deactivated_keys}
      InputPayload:
        IAMUser: '{{ IAMUser }}'
        AccessKeys: '{{ GetUserAccessKeys.AccessKeys }}'
    outputs:
      - Name: DeactivatedKeys
        Selector: $.Payload.DeactivatedKeys
        Type: StringList
  - name: CheckConsolePassword
    action: 'aws:executeScript'
    description: 'Check if user has console password and if unused'
    inputs:
      Runtime: python3.11
      Handler: check_password
      Script: |
        import boto3
        from datetime import datetime, timezone

        def check_password(events, context):
            iam = boto3.client('iam')
            username = events['IAMUser']
            max_age_days = ${MaxCredentialUsageAge}

            try:
                # Check if user has a login profile (console password)
                iam.get_login_profile(UserName=username)

                # Get user details to check password last used
                user = iam.get_user(UserName=username)
                password_last_used = user['User'].get('PasswordLastUsed')

                if password_last_used is None:
                    # Password never used, check create date
                    create_date = user['User']['CreateDate']
                    age_days = (datetime.now(timezone.utc) - create_date).days
                else:
                    age_days = (datetime.now(timezone.utc) - password_last_used).days

                should_delete = age_days >= max_age_days
                return {'ShouldDeletePassword': should_delete, 'AgeDays': age_days}
            except iam.exceptions.NoSuchEntityException:
                # No console password
                return {'ShouldDeletePassword': False, 'AgeDays': 0}
      InputPayload:
        IAMUser: '{{ IAMUser }}'
    outputs:
      - Name: ShouldDeletePassword
        Selector: $.Payload.ShouldDeletePassword
        Type: Boolean
  - name: DeleteConsolePassword
    action: 'aws:branch'
    description: 'Delete console password if unused'
    inputs:
      Choices:
        - NextStep: RemoveLoginProfile
          Variable: '{{ CheckConsolePassword.ShouldDeletePassword }}'
          BooleanEquals: true
  - name: RemoveLoginProfile
    action: 'aws:executeAwsApi'
    description: 'Remove console password for unused account'
    isEnd: ${ SNSTopicArn == "" ? "true" : "false" }
    inputs:
      Service: iam
      Api: DeleteLoginProfile
      UserName: '{{ IAMUser }}'
%{ if SNSTopicArn != "" ~}
  - name: SendNotification
    action: 'aws:executeAwsApi'
    description: 'Send SNS notification about credential deactivation'
    isEnd: true
    inputs:
      Service: sns
      Api: Publish
      TopicArn: '${SNSTopicArn}'
      Subject: 'IAM Unused Credentials Deactivated'
      Message: 'Unused credentials for IAM user {{ IAMUser }} have been deactivated. Deactivated access keys: {{ DeactivateAccessKeys.DeactivatedKeys }}'
%{ endif ~}
